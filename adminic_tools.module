<?php

/**
 * @file
 * Adminic Tools module.
 */

use Drupal\Core\Url;

/**
 * Implements hook_toolbar().
 */
function adminic_tools_toolbar() {
  $user = \Drupal::currentUser();
  if ($user->hasPermission('access toolbar')) {

    $manage = \Drupal::service('adminic_tools.entity_discovery')->getManage();
    $items = [];

    $config = \Drupal::config('system.site');
    $site_name = $config->get('name');

    // Home Button.
    $items['adminic_home'] = [
      '#type'               => 'toolbar_item',
      'tab'                 => [
        '#type'       => 'link',
        '#title'      => $site_name,
        '#url'        => Url::fromRoute('<front>'),
        '#attributes' => [
          'title' => t('Return to site content'),
          'class' => ['front', 'toolbar-icon', 'toolbar-icon-adminic-home'],
        ],
        '#cache'      => [
          'contexts' => ['user'],
        ],
      ],
      '#wrapper_attributes' => [
        'class' => [],
      ],
      '#weight'             => -99,
    ];

    // Content Administration.
    $items['adminic_content'] = [
      '#type'   => 'toolbar_item',
      'tab'     => [
        '#type'       => 'link',
        '#title'      => t('Content'),
        '#url'        => Url::fromRoute('content.settings'),
        '#attributes' => [
          'title' => t('My account'),
          'class' => ['toolbar-icon', 'toolbar-icon-adminic-content'],
        ],
        '#cache'      => [
          'contexts' => ['user'],
        ],
      ],
      /*'tray'    => [
        '#heading' => t('Content'),
        'content'  => $manage['content'],
      ],*/
      '#weight' => 100,
    ];

    // Config Administration.
    $items['adminic_config'] = [
      '#type'   => 'toolbar_item',
      'tab'     => [
        '#type'       => 'link',
        '#title'      => t('Config'),
        '#url'        => Url::fromRoute('config.settings'),
        '#attributes' => [
          'title' => t('Config'),
          'class' => ['toolbar-icon', 'toolbar-icon-adminic-config'],
        ],
        '#cache'      => [
          'contexts' => ['user'],
        ],
      ],
      /*'tray'    => [
        '#heading' => t('Configuration'),
        'content' => $manage['configuration'],
      ],*/
      '#weight' => 101,
    ];

    // Modules.
    if ($user->hasPermission('administer modules')) {
      $items['adminic_extend'] = [
        '#type'   => 'toolbar_item',
        'tab'     => [
          '#type'       => 'link',
          '#title'      => t('Extend'),
          '#url'        => Url::fromUserInput('/admin/modules'),
          '#attributes' => [
            'title' => t('Modules'),
            'class' => ['toolbar-icon', 'toolbar-icon-adminic-extend'],
          ],
          '#cache'      => [
            'contexts' => ['user'],
          ],
        ],
        '#weight' => 80,
      ];
    }

    // Themes.
    if ($user->hasPermission('administer themes')) {
      $items['adminic_appearance'] = [
        '#type'   => 'toolbar_item',
        'tab'     => [
          '#type'       => 'link',
          '#title'      => t('Appearance'),
          '#url'        => Url::fromUserInput('/admin/appearance'),
          '#attributes' => [
            'title' => t('Appearance'),
            'class' => ['toolbar-icon', 'toolbar-icon-adminic-appearance'],
          ],
          '#cache'      => [
            'contexts' => ['user'],
          ],
        ],
        '#weight' => 81,
      ];
    }



    $items['adminic_people'] = [
      '#type'   => 'toolbar_item',
      'tab'     => [
        '#type'       => 'link',
        '#title'      => t('People'),
        '#url'        => Url::fromRoute('entity.user.collection'),
        '#attributes' => [
          'title' => t('People'),
          'class' => ['toolbar-icon', 'toolbar-icon-adminic-config'],
        ],
        '#cache'      => [
          'contexts' => ['user'],
        ],
      ],
      '#weight' => 102,
    ];
    $items['adminic_help'] = [
      '#type'   => 'toolbar_item',
      'tab'     => [
        '#type'       => 'link',
        '#title'      => t('Help'),
        '#url'        => Url::fromRoute('help.main'),
        '#attributes' => [
          'title' => t('Help'),
          'class' => ['toolbar-icon', 'toolbar-icon-adminic-config'],
        ],
        '#cache'      => [
          'contexts' => ['user'],
        ],
      ],
      '#weight' => 103,
    ];
    $items['adminic_reports'] = [
      '#type'   => 'toolbar_item',
      'tab'     => [
        '#type'       => 'link',
        '#title'      => t('Reports'),
        '#url'        => Url::fromRoute('system.admin_reports'),
        '#attributes' => [
          'title' => t('Help'),
          'class' => ['toolbar-icon', 'toolbar-icon-adminic-config'],
        ],
        '#cache'      => [
          'contexts' => ['user'],
        ],
      ],
      '#weight' => 104,
    ];


    return $items;
  }

  return NULL;

}

/**
 * Implements hook_toolbar_alter().
 */
function adminic_tools_toolbar_alter(&$items) {
  unset($items['home']);

  foreach ($items as $key => $tab) {
    $items[$key]['#wrapper_attributes']['class'][] = $key;
    $items[$key]['#wrapper_attributes']['group'] = 'left';
  }
  $items['user']['#wrapper_attributes']['group'] = 'right';
  $items['contextual']['#wrapper_attributes']['group'] = 'right';

  $items['user']['#wrapper_attributes']['class'][] = 'right';
  $items['adminic_home']['#weight'] = -99;
  $items['adminic_content']['#weight'] = 0;
  $items['adminic_config']['#weight'] = 1;
  $items['adminic_extend']['#weight'] = 2;
  $items['adminic_appearance']['#weight'] = 3;
  $items['administration']['#weight'] = 10;
  $items['shortcuts']['#weight'] = 11;
  $items['devel']['#weight'] = 12;
  $items['coffee']['#weight'] = 13;
  $items['contextual']['#weight'] = 99;
  $items['user']['#weight'] = 99;
  //$items['admin_toolbar_tools']['#wrapper_attributes']['class'][] = 'hidden';
}

/**
 * Implements hook_page_attachments().
 *
 * @inheritdoc
 */
function adminic_tools_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'adminic_tools/global-styling';
  $attachments['#attached']['library'][] = 'adminic_tools/toolbar-fix';
}

/**
 * Implements hook_theme().
 */
function adminic_tools_theme() {
  return [
    'adminic_content_bundler' => [
      'variables' => [
        'title'           => NULL,
        'name' =>         NULL,
        'links'           => [],
        'collection_url'  => NULL,
        'add_bundle_url'  => NULL,
        'add_bundle_text' => NULL,
      ],
    ],
    'adminic_content_page' => [
      'variables' => [
        'title'           => NULL,
        'name' =>         NULL,
        'links'           => [],
        'collection_url'  => NULL,
        'add_bundle_url'  => NULL,
        'add_bundle_text' => NULL,
      ],
    ],
  ];
}

function adminic_tools_entity_disovery_alter(&$entity_info) {
  // Modify Content
  // Node
  if (isset($entity_info['content']['node'])) {
    $entity_info['content']['node']['list_url'] = 'system.admin_content';
    $entity_info['content']['node']['add_bundle_url'] = 'node.type_add';
    $entity_info['content']['node']['list_parametter'] = 'type';
    $entity_info['content']['node']['add_url'] = 'node.add';
  }
  // Term
  if (isset($entity_info['content']['taxonomy_term'])) {
    $entity_info['content']['taxonomy_term']['add_bundle_url'] = 'entity.taxonomy_vocabulary.add_form';
    $entity_info['content']['taxonomy_term']['add_bundle_label'] = 'New Vocabulary';
    $entity_info['content']['taxonomy_term']['add_url'] = 'entity.taxonomy_term.add_form';
  }
  // Media
  if (isset($entity_info['content']['media'])) {
    $entity_info['content']['media']['add_url'] = 'entity.media.add_form';
    $entity_info['content']['media']['list_url'] = 'view.media.media_page_list';
    $entity_info['content']['media']['addlist_parametter_url'] = 'provider';
    $entity_info['content']['media']['create_permissions'] = 'create media';
  }
  // Comment
  if (isset($entity_info['content']['comment'])) {
    $entity_info['content']['comment']['list_url'] = 'comment.admin';
  }
  // Paragraphs
  if (isset($entity_info['content']['paragraph'])) {
    $entity_info['content']['paragraph']['add_bundle_url'] = 'paragraphs.type_add';
  }
  // Block
  if (isset($entity_info['content']['block_content'])) {
    $entity_info['content']['block_content']['add_bundle_url'] = 'block_content.type_add';
    $entity_info['content']['block_content']['create_permissions'] = 'administer blocks';
    $entity_info['content']['block_content']['add_url'] = 'block_content.add_form';
    $entity_info['content']['block_content']['list_url'] = 'entity.block_content.collection';
  }
  // Crop
  if (isset($entity_info['content']['crop'])) {
    $entity_info['content']['crop']['add_bundle_url'] = 'crop.type_add';
  }

  // Modify Configuration
  if (isset($entity_info['configuration']['view'])) {
    $entity_info['configuration']['view']['list_url'] = NULL;
    $entity_info['configuration']['view']['add_bundle_url'] = 'views_ui.add';
    $entity_info['configuration']['view']['add_bundle_label'] = 'New View';
  }
  if (isset($entity_info['configuration']['image_style'])) {
    $entity_info['configuration']['image_style']['add_bundle_url'] = 'image.style_add';
    $entity_info['configuration']['image_style']['add_bundle_label'] = 'New Image Style';
  }
  if (isset($entity_info['configuration']['menu'])) {
    $entity_info['configuration']['menu']['add_bundle_label'] = 'Add Menu';
    $entity_info['configuration']['menu']['add_url'] = 'entity.menu.add_form';
    $entity_info['configuration']['menu']['list_url'] = 'entity.menu.edit_form';
    $entity_info['configuration']['menu']['create_permissions'] = 'administer menu';
  }
  if (isset($entity_info['configuration']['user_role'])) {
    $entity_info['configuration']['user_role']['list_url'] = NULL;
  }
  if (isset($entity_info['configuration']['image_style'])) {
    $entity_info['configuration']['image_style']['list_url'] = NULL;
  }
  if (isset($entity_info['configuration']['filter_format'])) {
    $entity_info['configuration']['filter_format']['list_url'] = NULL;
  }
  if (isset($entity_info['configuration']['block'])) {
    $entity_info['configuration']['block']['list_url'] = NULL;
  }
  if (isset($entity_info['configuration']['date_format'])) {
    $entity_info['configuration']['date_format']['list_url'] = 'entity.date_format.collection';
  }
}

/**
 * Implements hook_library_info_alter().
 */
function adminic_tools_library_info_alter(&$libraries, $extension) {
  if ($extension == 'toolbar') {
    // unset($libraries['toolbar']['css']['theme']['css/toolbar.theme.css']);
  }
}

/**
 * Implements hook_theme_registry_alter
 */
function adminic_tools_theme_registry_alter(&$theme_registry) {
  $theme_registry['toolbar']['path'] = drupal_get_path('module', 'adminic_tools') . '/templates';
}
